// NOTE: this file is generated by generate-interface.ts, do not edit by hand

import * as t from "io-ts";

import {
  CountAggregation,
  SumAggregation,
  AverageAggregation,
  MinAggregation,
  MaxAggregation,
  CumulativeCountAggregation,
  CumulativeSumAggregation,
  DistinctAggregation,
  BasicAggregations,
  ExpressionAggregationArg,
  ExpressionAggregation,
  MetricAggregation,
  UnnamedAggregation,
  NamedAggregation,
  Aggregation
} from "./aggregation";

export type ICountAggregation = t.TypeOf<typeof CountAggregation>;
export type ISumAggregation = t.TypeOf<typeof SumAggregation>;
export type IAverageAggregation = t.TypeOf<typeof AverageAggregation>;
export type IMinAggregation = t.TypeOf<typeof MinAggregation>;
export type IMaxAggregation = t.TypeOf<typeof MaxAggregation>;
export type ICumulativeCountAggregation = t.TypeOf<typeof CumulativeCountAggregation>;
export type ICumulativeSumAggregation = t.TypeOf<typeof CumulativeSumAggregation>;
export type IDistinctAggregation = t.TypeOf<typeof DistinctAggregation>;
export type IBasicAggregations = t.TypeOf<typeof BasicAggregations>;
export type IExpressionAggregationArg = t.TypeOf<typeof ExpressionAggregationArg>;
export type IExpressionAggregation = t.TypeOf<typeof ExpressionAggregation>;
export type IMetricAggregation = t.TypeOf<typeof MetricAggregation>;
export type IUnnamedAggregation = t.TypeOf<typeof UnnamedAggregation>;
export type INamedAggregation = t.TypeOf<typeof NamedAggregation>;
export type IAggregation = t.TypeOf<typeof Aggregation>;

import {
  Breakout
} from "./breakout";

export type IBreakout = t.TypeOf<typeof Breakout>;

import {
  ExpressionArg,
  ArithmeticExpression,
  FieldOrExpressionDef,
  Expression
} from "./expression";

export type IExpressionArg = t.TypeOf<typeof ExpressionArg>;
export type IArithmeticExpression = t.TypeOf<typeof ArithmeticExpression>;
export type IFieldOrExpressionDef = t.TypeOf<typeof FieldOrExpressionDef>;
export type IExpression = t.TypeOf<typeof Expression>;

import {
  LocalFieldReference,
  FieldLiteralReference,
  ForeignFieldReference,
  ExpressionReference,
  JoinedFieldReference,
  ConcreteFieldReference,
  DateTimeFieldReference,
  BinnableFieldReference,
  BinningStrategyName,
  BinningStrategyParam,
  BinningStrategy,
  Field,
  AggregationReference,
  FieldOrAggregationReference
} from "./field";

export type ILocalFieldReference = t.TypeOf<typeof LocalFieldReference>;
export type IFieldLiteralReference = t.TypeOf<typeof FieldLiteralReference>;
export type IForeignFieldReference = t.TypeOf<typeof ForeignFieldReference>;
export type IExpressionReference = t.TypeOf<typeof ExpressionReference>;
export type IJoinedFieldReference = t.TypeOf<typeof JoinedFieldReference>;
export type IConcreteFieldReference = t.TypeOf<typeof ConcreteFieldReference>;
export type IDateTimeFieldReference = t.TypeOf<typeof DateTimeFieldReference>;
export type IBinnableFieldReference = t.TypeOf<typeof BinnableFieldReference>;
export type IBinningStrategyName = t.TypeOf<typeof BinningStrategyName>;
export type IBinningStrategyParam = t.TypeOf<typeof BinningStrategyParam>;
export type IBinningStrategy = t.TypeOf<typeof BinningStrategy>;
export type IField = t.TypeOf<typeof Field>;
export type IAggregationReference = t.TypeOf<typeof AggregationReference>;
export type IFieldOrAggregationReference = t.TypeOf<typeof FieldOrAggregationReference>;

import {
  AndFilter,
  OrFilter,
  NotFilter,
  TimeIntervalFilter,
  RelativeDatetime,
  FieldOrRelativeDatetime,
  DatetimeLiteral,
  EqualityComparible,
  OrderComparible,
  EqualFilter,
  NotEqualFilter,
  GreaterThanFilter,
  GreaterThanEqualFilter,
  LessThanFilter,
  LessThanEqualFilter,
  BetweenFilter,
  StringOrField,
  StringFilterOptions,
  StartsWithFilter,
  EndsWithFilter,
  ContainsFilter,
  DoesNotContainsFilter,
  InsideFilter,
  IsNullFilter,
  NotNullFilter,
  SegmentFilter,
  Filter
} from "./filter";

export type IAndFilter = t.TypeOf<typeof AndFilter>;
export type IOrFilter = t.TypeOf<typeof OrFilter>;
export type INotFilter = t.TypeOf<typeof NotFilter>;
export type ITimeIntervalFilter = t.TypeOf<typeof TimeIntervalFilter>;
export type IRelativeDatetime = t.TypeOf<typeof RelativeDatetime>;
export type IFieldOrRelativeDatetime = t.TypeOf<typeof FieldOrRelativeDatetime>;
export type IDatetimeLiteral = t.TypeOf<typeof DatetimeLiteral>;
export type IEqualityComparible = t.TypeOf<typeof EqualityComparible>;
export type IOrderComparible = t.TypeOf<typeof OrderComparible>;
export type IEqualFilter = t.TypeOf<typeof EqualFilter>;
export type INotEqualFilter = t.TypeOf<typeof NotEqualFilter>;
export type IGreaterThanFilter = t.TypeOf<typeof GreaterThanFilter>;
export type IGreaterThanEqualFilter = t.TypeOf<typeof GreaterThanEqualFilter>;
export type ILessThanFilter = t.TypeOf<typeof LessThanFilter>;
export type ILessThanEqualFilter = t.TypeOf<typeof LessThanEqualFilter>;
export type IBetweenFilter = t.TypeOf<typeof BetweenFilter>;
export type IStringOrField = t.TypeOf<typeof StringOrField>;
export type IStringFilterOptions = t.TypeOf<typeof StringFilterOptions>;
export type IStartsWithFilter = t.TypeOf<typeof StartsWithFilter>;
export type IEndsWithFilter = t.TypeOf<typeof EndsWithFilter>;
export type IContainsFilter = t.TypeOf<typeof ContainsFilter>;
export type IDoesNotContainsFilter = t.TypeOf<typeof DoesNotContainsFilter>;
export type IInsideFilter = t.TypeOf<typeof InsideFilter>;
export type IIsNullFilter = t.TypeOf<typeof IsNullFilter>;
export type INotNullFilter = t.TypeOf<typeof NotNullFilter>;
export type ISegmentFilter = t.TypeOf<typeof SegmentFilter>;
export type IFilter = t.TypeOf<typeof Filter>;

import {
  QueryBase,
  QuerySourceQuery,
  QuerySourceTable,
  Query,
  StructuredDatasetQuery,
  TemplateTagBase,
  TemplateTagDimension,
  TemplateTagNumber,
  TemplateTagText,
  TemplateTagDate,
  TemplateTag,
  TemplateTagName,
  NativeQuery,
  NativeDatasetQuery,
  DatasetQuery,
  Question
} from "./index";

export type IQueryBase = t.TypeOf<typeof QueryBase>;
export type IQuerySourceQuery = t.TypeOf<typeof QuerySourceQuery>;
export type IQuerySourceTable = t.TypeOf<typeof QuerySourceTable>;
export type IQuery = t.TypeOf<typeof Query>;
export type IStructuredDatasetQuery = t.TypeOf<typeof StructuredDatasetQuery>;
export type ITemplateTagBase = t.TypeOf<typeof TemplateTagBase>;
export type ITemplateTagDimension = t.TypeOf<typeof TemplateTagDimension>;
export type ITemplateTagNumber = t.TypeOf<typeof TemplateTagNumber>;
export type ITemplateTagText = t.TypeOf<typeof TemplateTagText>;
export type ITemplateTagDate = t.TypeOf<typeof TemplateTagDate>;
export type ITemplateTag = t.TypeOf<typeof TemplateTag>;
export type ITemplateTagName = t.TypeOf<typeof TemplateTagName>;
export type INativeQuery = t.TypeOf<typeof NativeQuery>;
export type INativeDatasetQuery = t.TypeOf<typeof NativeDatasetQuery>;
export type IDatasetQuery = t.TypeOf<typeof DatasetQuery>;
export type IQuestion = t.TypeOf<typeof Question>;

import {
  JoinFields,
  JoinBase,
  JoinSourceTable,
  JoinSourceQuery,
  Join
} from "./join";

export type IJoinFields = t.TypeOf<typeof JoinFields>;
export type IJoinBase = t.TypeOf<typeof JoinBase>;
export type IJoinSourceTable = t.TypeOf<typeof JoinSourceTable>;
export type IJoinSourceQuery = t.TypeOf<typeof JoinSourceQuery>;
export type IJoin = t.TypeOf<typeof Join>;

import {
  Asc,
  Desc,
  OrderBy
} from "./order-by";

export type IAsc = t.TypeOf<typeof Asc>;
export type IDesc = t.TypeOf<typeof Desc>;
export type IOrderBy = t.TypeOf<typeof OrderBy>;

import {
  DatabaseId,
  TableId,
  FieldId,
  MetricId,
  SegmentId,
  QuestionId,
  ExpressionName,
  ColumnName,
  BaseType,
  DateTimeUnit,
  RelativeDatetimeUnit,
  JoinAlias
} from "./types";

export type IDatabaseId = t.TypeOf<typeof DatabaseId>;
export type ITableId = t.TypeOf<typeof TableId>;
export type IFieldId = t.TypeOf<typeof FieldId>;
export type IMetricId = t.TypeOf<typeof MetricId>;
export type ISegmentId = t.TypeOf<typeof SegmentId>;
export type IQuestionId = t.TypeOf<typeof QuestionId>;
export type IExpressionName = t.TypeOf<typeof ExpressionName>;
export type IColumnName = t.TypeOf<typeof ColumnName>;
export type IBaseType = t.TypeOf<typeof BaseType>;
export type IDateTimeUnit = t.TypeOf<typeof DateTimeUnit>;
export type IRelativeDatetimeUnit = t.TypeOf<typeof RelativeDatetimeUnit>;
export type IJoinAlias = t.TypeOf<typeof JoinAlias>;

